load(
    "@cgrindel_bazel_starlib//bazeldoc:defs.bzl",
    "doc_for_provs",
    "write_file_list",
    "write_header",
    doc_providers = "providers",
)
load("@cgrindel_bazel_starlib//bzlformat:defs.bzl", "bzlformat_pkg")

# MARK: - Documentation Providers

_RULES_AND_MACROS_DOC_PROVIDER = doc_providers.create(
    name = "rules_and_macros_overview",
    stardoc_input = "//swiftformat:defs.bzl",
    symbols = [
        "swiftformat_binary",
        "swiftformat_format",
        "swiftformat_library",
        "swiftformat_pkg",
        "swiftformat_test",
    ],
    deps = ["//swiftformat"],
)

# _REPOSITORY_RULES_DOC_PROVIDER = doc_providers.create(
#     name = "repository_rules_overview",
#     stardoc_input = "//swiftformat:load_package.bzl",
#     symbols = [
#         "swiftformat_load_package",
#     ],
#     deps = ["//swiftformat:load_package"],
# )

_API_SRCS = [
    "src_utils",
]

_API_DOC_PROVIDERS = [
    doc_providers.create(
        name = name,
        stardoc_input = "//swiftformat:defs.bzl",
        symbols = [name],
        deps = ["//swiftformat"],
    )
    for name in _API_SRCS
]

_ALL_DOC_PROVIDERS = [
    _RULES_AND_MACROS_DOC_PROVIDER,
    # _REPOSITORY_RULES_DOC_PROVIDER,
    doc_providers.create(
        name = "api",
        is_stardoc = False,
        stardoc_input = "//swiftformat:defs.bzl",
        deps = ["//swiftformat"],
    ),
] + _API_DOC_PROVIDERS

# MARK: - Headers

write_header(
    name = _RULES_AND_MACROS_DOC_PROVIDER.header_label,
    header_content = [
        "# Rules and Macros",
        "",
        "The rules and macros described below are used to format, test and ",
        "copy Swift source files.",
    ],
    symbols = _RULES_AND_MACROS_DOC_PROVIDER.symbols,
)

# write_header(
#     name = _REPOSITORY_RULES_DOC_PROVIDER.header_label,
#     header_content = [
#         "# Repository Rules and Macros",
#         "",
#         "The rules and macros described below are used to configure and download ",
#         "dependencies for rules_swiftformat.",
#     ],
#     symbols = _REPOSITORY_RULES_DOC_PROVIDER.symbols,
# )

# Write the API headers
[
    write_header(
        name = doc_prov.header_label,
        out = doc_prov.header_basename,
        header_content = [
            "# `{name}` API".format(name = doc_prov.name),
        ],
    )
    for doc_prov in _API_DOC_PROVIDERS
    if doc_prov.is_stardoc
]

# MARK: - Special Case api.md

# Write the api.md_ file as a special case.
write_file_list(
    name = "api_doc",
    out = "api.md_",
    doc_provs = _API_DOC_PROVIDERS,
    header_content = [
        "# Build API",
        "",
        "The APIs list below are used by rules_swiftformat.",
        "",
    ],
)

# MARK: - Generate Documentation from Providers

doc_for_provs(doc_provs = _ALL_DOC_PROVIDERS)

bzlformat_pkg(name = "bzlformat")
